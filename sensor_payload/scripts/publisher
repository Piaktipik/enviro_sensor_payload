#!/usr/bin/env python3
import rospy
from std_msgs.msg import *

import time
import colorsys
import sys
import ST7735
try:
    # Transitional fix for breaking change in LTR559
    from ltr559 import LTR559
    ltr559 = LTR559()
except ImportError:
    import ltr559

from bme280 import BME280
from pms5003 import PMS5003, ReadTimeoutError as pmsReadTimeoutError
from enviroplus import gas
from subprocess import PIPE, Popen
from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont
from fonts.ttf import RobotoMedium as UserFont

import socket

# Get IP
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect(("8.8.8.8", 80))
ip = str(s.getsockname()[0])

# Create ST7735 LCD display class
st7735 = ST7735.ST7735(
    port=0,
    cs=1,
    dc=9,
    backlight=12,
    rotation=270,
    spi_speed_hz=10000000
)

# Initialize display
st7735.begin()

WIDTH = st7735.width
HEIGHT = st7735.height

# Set up canvas and font
img = Image.new('RGB', (WIDTH, HEIGHT), color=(0, 0, 0))
draw = ImageDraw.Draw(img)
font_size = 20
font = ImageFont.truetype(UserFont, font_size)

# Initialise with IP
draw.text((0, 0), ip, font=font, fill=(255, 255, 255))
st7735.display(img)

# Update Screen
def display_text(lux):
    # Maintain length of list

    # Format the variable name and value
    draw.rectangle((0, 0, WIDTH, HEIGHT), (0, 0, 0))

    # Write the text at the top in black
    draw.text((0, 0), ip, font=font, fill= (255, 255, 255))
    draw.text((0, 40), "Lux: " + lux, font=font, fill= (0, 255, 0))
    st7735.display(img)

def publish_message():
    pub = rospy.Publisher('sensor_data', Int64, queue_size=10)
    rospy.init_node('talker', anonymous=True)
    rate = rospy.Rate(1) # 1hz
    while not rospy.is_shutdown():

        # Process Sensors
        # variable = "light"
        unit = "Lux"
        light = round(ltr559.get_lux())

        display_text(str(light))

        data = light

        rospy.loginfo(data)
        pub.publish(data)
        rate.sleep()
 
if __name__ == '__main__':
    try:
        publish_message()
    except rospy.ROSInterruptException:
        pass